//
//  MagazinePageIndicator.cs
//  Magazine
//
//  Created by Clay Martin on 10/22/16.
//  Copyright (c) 2016 Clay Martin. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



using System;
using System.Drawing;
using Foundation;
using UIKit;
using CoreGraphics;


namespace AircraftForSale
{
	[Register("MagazinePageIndicator")]
	public class MagazinePageIndicator : NSObject
	{

		//// Initialization

		static MagazinePageIndicator()
		{
		}


	public static UIColor FromHex(int hexValue)
	{
		return UIColor.FromRGB(
			(((float)((hexValue & 0xFF0000) >> 16)) / 255.0f),
			(((float)((hexValue & 0xFF00) >> 8)) / 255.0f),
			(((float)(hexValue & 0xFF)) / 255.0f)
		);
	  }


		//// Drawing Methods

		public static void DrawCanvas1(CGRect frame, float percentage, int currentIndex, int totalPages)
		{
			if (totalPages <= 10)
			{
				var newFrameWidth = frame.Width / 2;
				var newFrame = new CGRect(newFrameWidth - (newFrameWidth/2) , frame.Y, newFrameWidth, frame.Height);
				frame = newFrame;
			}

			//// Color Declarations
			var color = FromHex(0x4F8C13);//UIColor.Green;//FromRGBA(255, 252, 127, 255);

			//// Rectangle Drawing
			//var rectanglePath = UIBezierPath.FromRect(new CGRect(frame.GetMinX() + 20.0f, frame.GetMinY() + NMath.Floor((frame.Height - 1.0f) * 0.47619f + 0.5f), frame.Width - 40.0f, 1.0f));
			//UIColor.Gray.SetFill();
			//rectanglePath.Fill();



			nfloat mainIndicatorWidth = 14.0f;



			for (int i = 0; i < totalPages; i++)
			{
				if (i != 0 && i != (totalPages - 1))
				{
					var cPage = i;
					var cPercentage = (nfloat) cPage / ((nfloat)totalPages - 1f);
					DrawIndicatorAtPercentage(frame, mainIndicatorWidth/6, cPercentage, cPage);
				}
			}

			//// Oval Drawing
			var ovalPath = UIBezierPath.FromOval(new CGRect(frame.GetMinX() + 1f, frame.GetMinY() + NMath.Floor((frame.Height - 20.0f) * 0.50000f + 0.5f), 15.0f, 15.0f));

			UIColor.LightGray.SetStroke();

			ovalPath.LineWidth = 1f;
			ovalPath.Stroke();

			color.SetFill();
			ovalPath.Fill();


			////// Oval 4 Drawing
			var oval4Path = UIBezierPath.FromOval(new CGRect(frame.GetMinX() + frame.Width - 21f, frame.GetMinY() + NMath.Floor((frame.Height - 20.0f) * 0.50000f + 0.5f), 15.0f, 15.0f));

			UIColor.LightGray.SetStroke();

			oval4Path.LineWidth = 1f;
			oval4Path.Stroke();

			color.SetFill();
			oval4Path.Fill();

			DrawIndicatorAtPercentage(frame, mainIndicatorWidth, percentage, currentIndex);


		}

		static void DrawIndicatorAtPercentage(CGRect frame, nfloat pageIndicatorWidth, nfloat percentage, int currentIndex)
		{
			

			var totalWidth = frame.Width;

			nfloat progressX = 0f;

			if (currentIndex == 0)
			{
				progressX = 4.0f;
			}
			else {

				progressX = totalWidth * percentage;

				progressX = progressX - pageIndicatorWidth;

				if (progressX < 3.0f)
				{
					progressX = 4.0f;
				}

				if (progressX > (totalWidth - (pageIndicatorWidth + 4f)))
				{
					progressX = totalWidth - (pageIndicatorWidth + 4f);
				}
			}

			progressX = frame.GetMinX() + progressX;

			//// IndicatorLocationOval Drawing
			var indicatorLocationOvalPath = UIBezierPath.FromOval(new CGRect(progressX, frame.GetMinY() + NMath.Floor((frame.Height - pageIndicatorWidth) * 0.50000f + 0.5f), pageIndicatorWidth, pageIndicatorWidth));
			UIColor.Gray.SetFill();
			indicatorLocationOvalPath.Fill();
		}
	}
}
